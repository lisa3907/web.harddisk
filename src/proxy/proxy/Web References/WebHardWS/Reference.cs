//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.34014
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 이 소스 코드가 Microsoft.VSDesigner, 버전 4.0.30319.34014에서 자동으로 생성되었습니다.
// 
#pragma warning disable 1591

namespace WebHard.Proxy.WebHardWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WhdHelperSoap", Namespace="http://www.com/WebHard.WProxy/")]
    public partial class WhdHelper : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateRootFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback FileSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthFileListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrgCenterListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPersonInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsExistsFolderInFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsExistsRootFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsExistsSubFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPowerUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAuthListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFileInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFolderNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDownloadFileHashOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseDownloadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrepareDownloadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUploadFileHashOperationCompleted;
        
        private System.Threading.SendOrPostCallback FailureCloseUploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrepareUploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuccessCloseUploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppendChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckFileHashOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGenInforItemListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConstantSelectOperationCompleted;
        
        private System.Threading.SendOrPostCallback TranslateDataSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback TranslateTextOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WhdHelper() {
            this.Url = global::WebHard.Proxy.Properties.Settings.Default.WebHard_WhrdProxy_V33_WebHardWS_WebHardWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckFolderCompletedEventHandler CheckFolderCompleted;
        
        /// <remarks/>
        public event CreateFolderCompletedEventHandler CreateFolderCompleted;
        
        /// <remarks/>
        public event CreateRootFolderCompletedEventHandler CreateRootFolderCompleted;
        
        /// <remarks/>
        public event DeleteFileCompletedEventHandler DeleteFileCompleted;
        
        /// <remarks/>
        public event DeleteFolderCompletedEventHandler DeleteFolderCompleted;
        
        /// <remarks/>
        public event FileSearchCompletedEventHandler FileSearchCompleted;
        
        /// <remarks/>
        public event GetAuthFileListCompletedEventHandler GetAuthFileListCompleted;
        
        /// <remarks/>
        public event GetAuthListCompletedEventHandler GetAuthListCompleted;
        
        /// <remarks/>
        public event GetFileInfoCompletedEventHandler GetFileInfoCompleted;
        
        /// <remarks/>
        public event GetFolderInfoCompletedEventHandler GetFolderInfoCompleted;
        
        /// <remarks/>
        public event GetFolderListCompletedEventHandler GetFolderListCompleted;
        
        /// <remarks/>
        public event GetOrgCenterListCompletedEventHandler GetOrgCenterListCompleted;
        
        /// <remarks/>
        public event GetPersonInfoCompletedEventHandler GetPersonInfoCompleted;
        
        /// <remarks/>
        public event IsExistsFolderInFileCompletedEventHandler IsExistsFolderInFileCompleted;
        
        /// <remarks/>
        public event IsExistsRootFolderCompletedEventHandler IsExistsRootFolderCompleted;
        
        /// <remarks/>
        public event IsExistsSubFolderCompletedEventHandler IsExistsSubFolderCompleted;
        
        /// <remarks/>
        public event IsPowerUserCompletedEventHandler IsPowerUserCompleted;
        
        /// <remarks/>
        public event MoveFileCompletedEventHandler MoveFileCompleted;
        
        /// <remarks/>
        public event MoveFolderCompletedEventHandler MoveFolderCompleted;
        
        /// <remarks/>
        public event UpdateAuthListCompletedEventHandler UpdateAuthListCompleted;
        
        /// <remarks/>
        public event UpdateFileInfoCompletedEventHandler UpdateFileInfoCompleted;
        
        /// <remarks/>
        public event UpdateFolderNameCompletedEventHandler UpdateFolderNameCompleted;
        
        /// <remarks/>
        public event CheckDownloadFileHashCompletedEventHandler CheckDownloadFileHashCompleted;
        
        /// <remarks/>
        public event CloseDownloadFileCompletedEventHandler CloseDownloadFileCompleted;
        
        /// <remarks/>
        public event DownloadFileCompletedEventHandler DownloadFileCompleted;
        
        /// <remarks/>
        public event GetFileSizeCompletedEventHandler GetFileSizeCompleted;
        
        /// <remarks/>
        public event PingCompletedEventHandler PingCompleted;
        
        /// <remarks/>
        public event PrepareDownloadFileCompletedEventHandler PrepareDownloadFileCompleted;
        
        /// <remarks/>
        public event CheckUploadFileHashCompletedEventHandler CheckUploadFileHashCompleted;
        
        /// <remarks/>
        public event FailureCloseUploadFileCompletedEventHandler FailureCloseUploadFileCompleted;
        
        /// <remarks/>
        public event PrepareUploadFileCompletedEventHandler PrepareUploadFileCompleted;
        
        /// <remarks/>
        public event SuccessCloseUploadFileCompletedEventHandler SuccessCloseUploadFileCompleted;
        
        /// <remarks/>
        public event UploadFileCompletedEventHandler UploadFileCompleted;
        
        /// <remarks/>
        public event AppendChunkCompletedEventHandler AppendChunkCompleted;
        
        /// <remarks/>
        public event CheckFileHashCompletedEventHandler CheckFileHashCompleted;
        
        /// <remarks/>
        public event DownloadChunkCompletedEventHandler DownloadChunkCompleted;
        
        /// <remarks/>
        public event GetGenInforItemListCompletedEventHandler GetGenInforItemListCompleted;
        
        /// <remarks/>
        public event ConstantSelectCompletedEventHandler ConstantSelectCompleted;
        
        /// <remarks/>
        public event TranslateDataSetCompletedEventHandler TranslateDataSetCompleted;
        
        /// <remarks/>
        public event TranslateTextCompletedEventHandler TranslateTextCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/CheckFolder", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CheckFolder(string p_cocd, System.Guid p_certkey, string p_ipadrs) {
            object[] results = this.Invoke("CheckFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs) {
            this.CheckFolderAsync(p_cocd, p_certkey, p_ipadrs, null);
        }
        
        /// <remarks/>
        public void CheckFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, object userState) {
            if ((this.CheckFolderOperationCompleted == null)) {
                this.CheckFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFolderOperationCompleted);
            }
            this.InvokeAsync("CheckFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs}, this.CheckFolderOperationCompleted, userState);
        }
        
        private void OnCheckFolderOperationCompleted(object arg) {
            if ((this.CheckFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFolderCompleted(this, new CheckFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/CreateFolder", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CreateFolder(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_rname, string p_fileid) {
            object[] results = this.Invoke("CreateFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_rname,
                        p_fileid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CreateFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_rname, string p_fileid) {
            this.CreateFolderAsync(p_cocd, p_certkey, p_ipadrs, p_rname, p_fileid, null);
        }
        
        /// <remarks/>
        public void CreateFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_rname, string p_fileid, object userState) {
            if ((this.CreateFolderOperationCompleted == null)) {
                this.CreateFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFolderOperationCompleted);
            }
            this.InvokeAsync("CreateFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_rname,
                        p_fileid}, this.CreateFolderOperationCompleted, userState);
        }
        
        private void OnCreateFolderOperationCompleted(object arg) {
            if ((this.CreateFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFolderCompleted(this, new CreateFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/CreateRootFolder", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CreateRootFolder(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_rname) {
            object[] results = this.Invoke("CreateRootFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_rname});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CreateRootFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_rname) {
            this.CreateRootFolderAsync(p_cocd, p_certkey, p_ipadrs, p_rname, null);
        }
        
        /// <remarks/>
        public void CreateRootFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_rname, object userState) {
            if ((this.CreateRootFolderOperationCompleted == null)) {
                this.CreateRootFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateRootFolderOperationCompleted);
            }
            this.InvokeAsync("CreateRootFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_rname}, this.CreateRootFolderOperationCompleted, userState);
        }
        
        private void OnCreateRootFolderOperationCompleted(object arg) {
            if ((this.CreateRootFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateRootFolderCompleted(this, new CreateRootFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/DeleteFile", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteFile(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_guid, string p_fileid, System.DateTime p_wdate) {
            object[] results = this.Invoke("DeleteFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_guid,
                        p_fileid,
                        p_wdate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_guid, string p_fileid, System.DateTime p_wdate) {
            this.DeleteFileAsync(p_cocd, p_certkey, p_ipadrs, p_guid, p_fileid, p_wdate, null);
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_guid, string p_fileid, System.DateTime p_wdate, object userState) {
            if ((this.DeleteFileOperationCompleted == null)) {
                this.DeleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFileOperationCompleted);
            }
            this.InvokeAsync("DeleteFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_guid,
                        p_fileid,
                        p_wdate}, this.DeleteFileOperationCompleted, userState);
        }
        
        private void OnDeleteFileOperationCompleted(object arg) {
            if ((this.DeleteFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFileCompleted(this, new DeleteFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/DeleteFolder", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteFolder(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid) {
            object[] results = this.Invoke("DeleteFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid) {
            this.DeleteFolderAsync(p_cocd, p_certkey, p_ipadrs, p_fileid, null);
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, object userState) {
            if ((this.DeleteFolderOperationCompleted == null)) {
                this.DeleteFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid}, this.DeleteFolderOperationCompleted, userState);
        }
        
        private void OnDeleteFolderOperationCompleted(object arg) {
            if ((this.DeleteFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFolderCompleted(this, new DeleteFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/FileSearch", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FileSearch(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, System.Data.DataSet p_seekds, bool p_powerUser) {
            object[] results = this.Invoke("FileSearch", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid,
                        p_seekds,
                        p_powerUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FileSearchAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, System.Data.DataSet p_seekds, bool p_powerUser) {
            this.FileSearchAsync(p_cocd, p_certkey, p_ipadrs, p_fileid, p_seekds, p_powerUser, null);
        }
        
        /// <remarks/>
        public void FileSearchAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, System.Data.DataSet p_seekds, bool p_powerUser, object userState) {
            if ((this.FileSearchOperationCompleted == null)) {
                this.FileSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileSearchOperationCompleted);
            }
            this.InvokeAsync("FileSearch", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid,
                        p_seekds,
                        p_powerUser}, this.FileSearchOperationCompleted, userState);
        }
        
        private void OnFileSearchOperationCompleted(object arg) {
            if ((this.FileSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FileSearchCompleted(this, new FileSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/GetAuthFileList", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAuthFileList(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, bool p_powerUser) {
            object[] results = this.Invoke("GetAuthFileList", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid,
                        p_powerUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthFileListAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, bool p_powerUser) {
            this.GetAuthFileListAsync(p_cocd, p_certkey, p_ipadrs, p_fileid, p_powerUser, null);
        }
        
        /// <remarks/>
        public void GetAuthFileListAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, bool p_powerUser, object userState) {
            if ((this.GetAuthFileListOperationCompleted == null)) {
                this.GetAuthFileListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthFileListOperationCompleted);
            }
            this.InvokeAsync("GetAuthFileList", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid,
                        p_powerUser}, this.GetAuthFileListOperationCompleted, userState);
        }
        
        private void OnGetAuthFileListOperationCompleted(object arg) {
            if ((this.GetAuthFileListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthFileListCompleted(this, new GetAuthFileListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/GetAuthList", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAuthList(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid) {
            object[] results = this.Invoke("GetAuthList", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthListAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid) {
            this.GetAuthListAsync(p_cocd, p_certkey, p_ipadrs, p_fileid, null);
        }
        
        /// <remarks/>
        public void GetAuthListAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, object userState) {
            if ((this.GetAuthListOperationCompleted == null)) {
                this.GetAuthListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthListOperationCompleted);
            }
            this.InvokeAsync("GetAuthList", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid}, this.GetAuthListOperationCompleted, userState);
        }
        
        private void OnGetAuthListOperationCompleted(object arg) {
            if ((this.GetAuthListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthListCompleted(this, new GetAuthListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/GetFileInfo", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetFileInfo(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, bool p_powerUser) {
            object[] results = this.Invoke("GetFileInfo", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid,
                        p_powerUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileInfoAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, bool p_powerUser) {
            this.GetFileInfoAsync(p_cocd, p_certkey, p_ipadrs, p_fileid, p_powerUser, null);
        }
        
        /// <remarks/>
        public void GetFileInfoAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, bool p_powerUser, object userState) {
            if ((this.GetFileInfoOperationCompleted == null)) {
                this.GetFileInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileInfoOperationCompleted);
            }
            this.InvokeAsync("GetFileInfo", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid,
                        p_powerUser}, this.GetFileInfoOperationCompleted, userState);
        }
        
        private void OnGetFileInfoOperationCompleted(object arg) {
            if ((this.GetFileInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileInfoCompleted(this, new GetFileInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/GetFolderInfo", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetFolderInfo(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, bool p_powerUser) {
            object[] results = this.Invoke("GetFolderInfo", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid,
                        p_powerUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderInfoAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, bool p_powerUser) {
            this.GetFolderInfoAsync(p_cocd, p_certkey, p_ipadrs, p_fileid, p_powerUser, null);
        }
        
        /// <remarks/>
        public void GetFolderInfoAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, bool p_powerUser, object userState) {
            if ((this.GetFolderInfoOperationCompleted == null)) {
                this.GetFolderInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderInfoOperationCompleted);
            }
            this.InvokeAsync("GetFolderInfo", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid,
                        p_powerUser}, this.GetFolderInfoOperationCompleted, userState);
        }
        
        private void OnGetFolderInfoOperationCompleted(object arg) {
            if ((this.GetFolderInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderInfoCompleted(this, new GetFolderInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/GetFolderList", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetFolderList(string p_cocd, System.Guid p_certkey, string p_ipadrs, bool p_powerUser) {
            object[] results = this.Invoke("GetFolderList", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_powerUser});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderListAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, bool p_powerUser) {
            this.GetFolderListAsync(p_cocd, p_certkey, p_ipadrs, p_powerUser, null);
        }
        
        /// <remarks/>
        public void GetFolderListAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, bool p_powerUser, object userState) {
            if ((this.GetFolderListOperationCompleted == null)) {
                this.GetFolderListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderListOperationCompleted);
            }
            this.InvokeAsync("GetFolderList", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_powerUser}, this.GetFolderListOperationCompleted, userState);
        }
        
        private void OnGetFolderListOperationCompleted(object arg) {
            if ((this.GetFolderListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderListCompleted(this, new GetFolderListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/GetOrgCenterList", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetOrgCenterList(string p_cocd, System.Guid p_certkey, string p_ipadrs) {
            object[] results = this.Invoke("GetOrgCenterList", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrgCenterListAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs) {
            this.GetOrgCenterListAsync(p_cocd, p_certkey, p_ipadrs, null);
        }
        
        /// <remarks/>
        public void GetOrgCenterListAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, object userState) {
            if ((this.GetOrgCenterListOperationCompleted == null)) {
                this.GetOrgCenterListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrgCenterListOperationCompleted);
            }
            this.InvokeAsync("GetOrgCenterList", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs}, this.GetOrgCenterListOperationCompleted, userState);
        }
        
        private void OnGetOrgCenterListOperationCompleted(object arg) {
            if ((this.GetOrgCenterListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrgCenterListCompleted(this, new GetOrgCenterListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/GetPersonInfo", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPersonInfo(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fields) {
            object[] results = this.Invoke("GetPersonInfo", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fields});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPersonInfoAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fields) {
            this.GetPersonInfoAsync(p_cocd, p_certkey, p_ipadrs, p_fields, null);
        }
        
        /// <remarks/>
        public void GetPersonInfoAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fields, object userState) {
            if ((this.GetPersonInfoOperationCompleted == null)) {
                this.GetPersonInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPersonInfoOperationCompleted);
            }
            this.InvokeAsync("GetPersonInfo", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fields}, this.GetPersonInfoOperationCompleted, userState);
        }
        
        private void OnGetPersonInfoOperationCompleted(object arg) {
            if ((this.GetPersonInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPersonInfoCompleted(this, new GetPersonInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/IsExistsFolderInFile", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsExistsFolderInFile(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid) {
            object[] results = this.Invoke("IsExistsFolderInFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsExistsFolderInFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid) {
            this.IsExistsFolderInFileAsync(p_cocd, p_certkey, p_ipadrs, p_fileid, null);
        }
        
        /// <remarks/>
        public void IsExistsFolderInFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, object userState) {
            if ((this.IsExistsFolderInFileOperationCompleted == null)) {
                this.IsExistsFolderInFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsExistsFolderInFileOperationCompleted);
            }
            this.InvokeAsync("IsExistsFolderInFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid}, this.IsExistsFolderInFileOperationCompleted, userState);
        }
        
        private void OnIsExistsFolderInFileOperationCompleted(object arg) {
            if ((this.IsExistsFolderInFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsExistsFolderInFileCompleted(this, new IsExistsFolderInFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/IsExistsRootFolder", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsExistsRootFolder(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_rname) {
            object[] results = this.Invoke("IsExistsRootFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_rname});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsExistsRootFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_rname) {
            this.IsExistsRootFolderAsync(p_cocd, p_certkey, p_ipadrs, p_rname, null);
        }
        
        /// <remarks/>
        public void IsExistsRootFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_rname, object userState) {
            if ((this.IsExistsRootFolderOperationCompleted == null)) {
                this.IsExistsRootFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsExistsRootFolderOperationCompleted);
            }
            this.InvokeAsync("IsExistsRootFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_rname}, this.IsExistsRootFolderOperationCompleted, userState);
        }
        
        private void OnIsExistsRootFolderOperationCompleted(object arg) {
            if ((this.IsExistsRootFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsExistsRootFolderCompleted(this, new IsExistsRootFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/IsExistsSubFolder", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsExistsSubFolder(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid) {
            object[] results = this.Invoke("IsExistsSubFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsExistsSubFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid) {
            this.IsExistsSubFolderAsync(p_cocd, p_certkey, p_ipadrs, p_fileid, null);
        }
        
        /// <remarks/>
        public void IsExistsSubFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, object userState) {
            if ((this.IsExistsSubFolderOperationCompleted == null)) {
                this.IsExistsSubFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsExistsSubFolderOperationCompleted);
            }
            this.InvokeAsync("IsExistsSubFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid}, this.IsExistsSubFolderOperationCompleted, userState);
        }
        
        private void OnIsExistsSubFolderOperationCompleted(object arg) {
            if ((this.IsExistsSubFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsExistsSubFolderCompleted(this, new IsExistsSubFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/IsPowerUser", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsPowerUser(string p_cocd, System.Guid p_certkey, string p_ipadrs) {
            object[] results = this.Invoke("IsPowerUser", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPowerUserAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs) {
            this.IsPowerUserAsync(p_cocd, p_certkey, p_ipadrs, null);
        }
        
        /// <remarks/>
        public void IsPowerUserAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, object userState) {
            if ((this.IsPowerUserOperationCompleted == null)) {
                this.IsPowerUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPowerUserOperationCompleted);
            }
            this.InvokeAsync("IsPowerUser", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs}, this.IsPowerUserOperationCompleted, userState);
        }
        
        private void OnIsPowerUserOperationCompleted(object arg) {
            if ((this.IsPowerUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPowerUserCompleted(this, new IsPowerUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/MoveFile", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MoveFile(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, System.Data.DataSet p_srcset, System.Data.DataSet p_rmvset) {
            object[] results = this.Invoke("MoveFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid,
                        p_srcset,
                        p_rmvset});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MoveFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, System.Data.DataSet p_srcset, System.Data.DataSet p_rmvset) {
            this.MoveFileAsync(p_cocd, p_certkey, p_ipadrs, p_fileid, p_srcset, p_rmvset, null);
        }
        
        /// <remarks/>
        public void MoveFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, System.Data.DataSet p_srcset, System.Data.DataSet p_rmvset, object userState) {
            if ((this.MoveFileOperationCompleted == null)) {
                this.MoveFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveFileOperationCompleted);
            }
            this.InvokeAsync("MoveFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid,
                        p_srcset,
                        p_rmvset}, this.MoveFileOperationCompleted, userState);
        }
        
        private void OnMoveFileOperationCompleted(object arg) {
            if ((this.MoveFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveFileCompleted(this, new MoveFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/MoveFolder", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MoveFolder(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_tfileid, string p_sfileid) {
            object[] results = this.Invoke("MoveFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_tfileid,
                        p_sfileid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MoveFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_tfileid, string p_sfileid) {
            this.MoveFolderAsync(p_cocd, p_certkey, p_ipadrs, p_tfileid, p_sfileid, null);
        }
        
        /// <remarks/>
        public void MoveFolderAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_tfileid, string p_sfileid, object userState) {
            if ((this.MoveFolderOperationCompleted == null)) {
                this.MoveFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveFolderOperationCompleted);
            }
            this.InvokeAsync("MoveFolder", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_tfileid,
                        p_sfileid}, this.MoveFolderOperationCompleted, userState);
        }
        
        private void OnMoveFolderOperationCompleted(object arg) {
            if ((this.MoveFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveFolderCompleted(this, new MoveFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/UpdateAuthList", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateAuthList(string p_cocd, System.Guid p_certkey, string p_ipadrs, bool p_checked, string p_ftype, string p_fileid, System.Data.DataSet p_authds) {
            object[] results = this.Invoke("UpdateAuthList", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_checked,
                        p_ftype,
                        p_fileid,
                        p_authds});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAuthListAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, bool p_checked, string p_ftype, string p_fileid, System.Data.DataSet p_authds) {
            this.UpdateAuthListAsync(p_cocd, p_certkey, p_ipadrs, p_checked, p_ftype, p_fileid, p_authds, null);
        }
        
        /// <remarks/>
        public void UpdateAuthListAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, bool p_checked, string p_ftype, string p_fileid, System.Data.DataSet p_authds, object userState) {
            if ((this.UpdateAuthListOperationCompleted == null)) {
                this.UpdateAuthListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAuthListOperationCompleted);
            }
            this.InvokeAsync("UpdateAuthList", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_checked,
                        p_ftype,
                        p_fileid,
                        p_authds}, this.UpdateAuthListOperationCompleted, userState);
        }
        
        private void OnUpdateAuthListOperationCompleted(object arg) {
            if ((this.UpdateAuthListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAuthListCompleted(this, new UpdateAuthListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/UpdateFileInfo", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateFileInfo(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, string p_title, string p_desc) {
            object[] results = this.Invoke("UpdateFileInfo", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid,
                        p_title,
                        p_desc});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFileInfoAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, string p_title, string p_desc) {
            this.UpdateFileInfoAsync(p_cocd, p_certkey, p_ipadrs, p_fileid, p_title, p_desc, null);
        }
        
        /// <remarks/>
        public void UpdateFileInfoAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_fileid, string p_title, string p_desc, object userState) {
            if ((this.UpdateFileInfoOperationCompleted == null)) {
                this.UpdateFileInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFileInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateFileInfo", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_fileid,
                        p_title,
                        p_desc}, this.UpdateFileInfoOperationCompleted, userState);
        }
        
        private void OnUpdateFileInfoOperationCompleted(object arg) {
            if ((this.UpdateFileInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFileInfoCompleted(this, new UpdateFileInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/UpdateFolderName", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateFolderName(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_rname, string p_fileid) {
            object[] results = this.Invoke("UpdateFolderName", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_rname,
                        p_fileid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFolderNameAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_rname, string p_fileid) {
            this.UpdateFolderNameAsync(p_cocd, p_certkey, p_ipadrs, p_rname, p_fileid, null);
        }
        
        /// <remarks/>
        public void UpdateFolderNameAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_rname, string p_fileid, object userState) {
            if ((this.UpdateFolderNameOperationCompleted == null)) {
                this.UpdateFolderNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFolderNameOperationCompleted);
            }
            this.InvokeAsync("UpdateFolderName", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_rname,
                        p_fileid}, this.UpdateFolderNameOperationCompleted, userState);
        }
        
        private void OnUpdateFolderNameOperationCompleted(object arg) {
            if ((this.UpdateFolderNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFolderNameCompleted(this, new UpdateFolderNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/CheckDownloadFileHash", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckDownloadFileHash(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename) {
            object[] results = this.Invoke("CheckDownloadFileHash", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDownloadFileHashAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename) {
            this.CheckDownloadFileHashAsync(p_cocd, p_certkey, p_ipadrs, p_wdate, p_filename, null);
        }
        
        /// <remarks/>
        public void CheckDownloadFileHashAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, object userState) {
            if ((this.CheckDownloadFileHashOperationCompleted == null)) {
                this.CheckDownloadFileHashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDownloadFileHashOperationCompleted);
            }
            this.InvokeAsync("CheckDownloadFileHash", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename}, this.CheckDownloadFileHashOperationCompleted, userState);
        }
        
        private void OnCheckDownloadFileHashOperationCompleted(object arg) {
            if ((this.CheckDownloadFileHashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDownloadFileHashCompleted(this, new CheckDownloadFileHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/CloseDownloadFile", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CloseDownloadFile(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename) {
            object[] results = this.Invoke("CloseDownloadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CloseDownloadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename) {
            this.CloseDownloadFileAsync(p_cocd, p_certkey, p_ipadrs, p_wdate, p_filename, null);
        }
        
        /// <remarks/>
        public void CloseDownloadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, object userState) {
            if ((this.CloseDownloadFileOperationCompleted == null)) {
                this.CloseDownloadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseDownloadFileOperationCompleted);
            }
            this.InvokeAsync("CloseDownloadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename}, this.CloseDownloadFileOperationCompleted, userState);
        }
        
        private void OnCloseDownloadFileOperationCompleted(object arg) {
            if ((this.CloseDownloadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseDownloadFileCompleted(this, new CloseDownloadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/DownloadFile", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadFile(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, long p_offset, int p_bufferSize) {
            object[] results = this.Invoke("DownloadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename,
                        p_offset,
                        p_bufferSize});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, long p_offset, int p_bufferSize) {
            this.DownloadFileAsync(p_cocd, p_certkey, p_ipadrs, p_wdate, p_filename, p_offset, p_bufferSize, null);
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, long p_offset, int p_bufferSize, object userState) {
            if ((this.DownloadFileOperationCompleted == null)) {
                this.DownloadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadFileOperationCompleted);
            }
            this.InvokeAsync("DownloadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename,
                        p_offset,
                        p_bufferSize}, this.DownloadFileOperationCompleted, userState);
        }
        
        private void OnDownloadFileOperationCompleted(object arg) {
            if ((this.DownloadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadFileCompleted(this, new DownloadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/GetFileSize", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetFileSize(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename) {
            object[] results = this.Invoke("GetFileSize", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename) {
            this.GetFileSizeAsync(p_cocd, p_certkey, p_ipadrs, p_wdate, p_filename, null);
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, object userState) {
            if ((this.GetFileSizeOperationCompleted == null)) {
                this.GetFileSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileSizeOperationCompleted);
            }
            this.InvokeAsync("GetFileSize", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename}, this.GetFileSizeOperationCompleted, userState);
        }
        
        private void OnGetFileSizeOperationCompleted(object arg) {
            if ((this.GetFileSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileSizeCompleted(this, new GetFileSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/Ping", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Ping(string p_cocd, System.Guid p_certkey, string p_ipadrs) {
            object[] results = this.Invoke("Ping", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PingAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs) {
            this.PingAsync(p_cocd, p_certkey, p_ipadrs, null);
        }
        
        /// <remarks/>
        public void PingAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
            }
            this.InvokeAsync("Ping", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs}, this.PingOperationCompleted, userState);
        }
        
        private void OnPingOperationCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/PrepareDownloadFile", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PrepareDownloadFile(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, out long p_filesize, out int p_maxlength) {
            object[] results = this.Invoke("PrepareDownloadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename});
            p_filesize = ((long)(results[1]));
            p_maxlength = ((int)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PrepareDownloadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename) {
            this.PrepareDownloadFileAsync(p_cocd, p_certkey, p_ipadrs, p_wdate, p_filename, null);
        }
        
        /// <remarks/>
        public void PrepareDownloadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, object userState) {
            if ((this.PrepareDownloadFileOperationCompleted == null)) {
                this.PrepareDownloadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareDownloadFileOperationCompleted);
            }
            this.InvokeAsync("PrepareDownloadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename}, this.PrepareDownloadFileOperationCompleted, userState);
        }
        
        private void OnPrepareDownloadFileOperationCompleted(object arg) {
            if ((this.PrepareDownloadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareDownloadFileCompleted(this, new PrepareDownloadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/CheckUploadFileHash", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckUploadFileHash(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_filename) {
            object[] results = this.Invoke("CheckUploadFileHash", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_filename});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUploadFileHashAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_filename) {
            this.CheckUploadFileHashAsync(p_cocd, p_certkey, p_ipadrs, p_filename, null);
        }
        
        /// <remarks/>
        public void CheckUploadFileHashAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_filename, object userState) {
            if ((this.CheckUploadFileHashOperationCompleted == null)) {
                this.CheckUploadFileHashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUploadFileHashOperationCompleted);
            }
            this.InvokeAsync("CheckUploadFileHash", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_filename}, this.CheckUploadFileHashOperationCompleted, userState);
        }
        
        private void OnCheckUploadFileHashOperationCompleted(object arg) {
            if ((this.CheckUploadFileHashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUploadFileHashCompleted(this, new CheckUploadFileHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/FailureCloseUploadFile", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FailureCloseUploadFile(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_filename) {
            this.Invoke("FailureCloseUploadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_filename});
        }
        
        /// <remarks/>
        public void FailureCloseUploadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_filename) {
            this.FailureCloseUploadFileAsync(p_cocd, p_certkey, p_ipadrs, p_filename, null);
        }
        
        /// <remarks/>
        public void FailureCloseUploadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_filename, object userState) {
            if ((this.FailureCloseUploadFileOperationCompleted == null)) {
                this.FailureCloseUploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFailureCloseUploadFileOperationCompleted);
            }
            this.InvokeAsync("FailureCloseUploadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_filename}, this.FailureCloseUploadFileOperationCompleted, userState);
        }
        
        private void OnFailureCloseUploadFileOperationCompleted(object arg) {
            if ((this.FailureCloseUploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FailureCloseUploadFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/PrepareUploadFile", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PrepareUploadFile(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.Data.DataSet p_infset, out string p_fileid, out System.DateTime p_wdate, out string p_filename, out int p_maxlength) {
            object[] results = this.Invoke("PrepareUploadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_infset});
            p_fileid = ((string)(results[1]));
            p_wdate = ((System.DateTime)(results[2]));
            p_filename = ((string)(results[3]));
            p_maxlength = ((int)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PrepareUploadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.Data.DataSet p_infset) {
            this.PrepareUploadFileAsync(p_cocd, p_certkey, p_ipadrs, p_infset, null);
        }
        
        /// <remarks/>
        public void PrepareUploadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.Data.DataSet p_infset, object userState) {
            if ((this.PrepareUploadFileOperationCompleted == null)) {
                this.PrepareUploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareUploadFileOperationCompleted);
            }
            this.InvokeAsync("PrepareUploadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_infset}, this.PrepareUploadFileOperationCompleted, userState);
        }
        
        private void OnPrepareUploadFileOperationCompleted(object arg) {
            if ((this.PrepareUploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareUploadFileCompleted(this, new PrepareUploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/SuccessCloseUploadFile", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SuccessCloseUploadFile(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, System.Data.DataSet p_infset) {
            object[] results = this.Invoke("SuccessCloseUploadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename,
                        p_infset});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SuccessCloseUploadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, System.Data.DataSet p_infset) {
            this.SuccessCloseUploadFileAsync(p_cocd, p_certkey, p_ipadrs, p_wdate, p_filename, p_infset, null);
        }
        
        /// <remarks/>
        public void SuccessCloseUploadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, System.Data.DataSet p_infset, object userState) {
            if ((this.SuccessCloseUploadFileOperationCompleted == null)) {
                this.SuccessCloseUploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuccessCloseUploadFileOperationCompleted);
            }
            this.InvokeAsync("SuccessCloseUploadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename,
                        p_infset}, this.SuccessCloseUploadFileOperationCompleted, userState);
        }
        
        private void OnSuccessCloseUploadFileOperationCompleted(object arg) {
            if ((this.SuccessCloseUploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuccessCloseUploadFileCompleted(this, new SuccessCloseUploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/UploadFile", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadFile(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_filename, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] p_buffer, long p_offset, int p_writeCount) {
            object[] results = this.Invoke("UploadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_filename,
                        p_buffer,
                        p_offset,
                        p_writeCount});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_filename, byte[] p_buffer, long p_offset, int p_writeCount) {
            this.UploadFileAsync(p_cocd, p_certkey, p_ipadrs, p_filename, p_buffer, p_offset, p_writeCount, null);
        }
        
        /// <remarks/>
        public void UploadFileAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_filename, byte[] p_buffer, long p_offset, int p_writeCount, object userState) {
            if ((this.UploadFileOperationCompleted == null)) {
                this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
            }
            this.InvokeAsync("UploadFile", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_filename,
                        p_buffer,
                        p_offset,
                        p_writeCount}, this.UploadFileOperationCompleted, userState);
        }
        
        private void OnUploadFileOperationCompleted(object arg) {
            if ((this.UploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/AppendChunk", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AppendChunk(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] p_buffer, long p_offset, int p_bytesRead) {
            object[] results = this.Invoke("AppendChunk", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename,
                        p_buffer,
                        p_offset,
                        p_bytesRead});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AppendChunkAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, byte[] p_buffer, long p_offset, int p_bytesRead) {
            this.AppendChunkAsync(p_cocd, p_certkey, p_ipadrs, p_wdate, p_filename, p_buffer, p_offset, p_bytesRead, null);
        }
        
        /// <remarks/>
        public void AppendChunkAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, byte[] p_buffer, long p_offset, int p_bytesRead, object userState) {
            if ((this.AppendChunkOperationCompleted == null)) {
                this.AppendChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppendChunkOperationCompleted);
            }
            this.InvokeAsync("AppendChunk", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename,
                        p_buffer,
                        p_offset,
                        p_bytesRead}, this.AppendChunkOperationCompleted, userState);
        }
        
        private void OnAppendChunkOperationCompleted(object arg) {
            if ((this.AppendChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppendChunkCompleted(this, new AppendChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/CheckFileHash", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckFileHash(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename) {
            object[] results = this.Invoke("CheckFileHash", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFileHashAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename) {
            this.CheckFileHashAsync(p_cocd, p_certkey, p_ipadrs, p_wdate, p_filename, null);
        }
        
        /// <remarks/>
        public void CheckFileHashAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, object userState) {
            if ((this.CheckFileHashOperationCompleted == null)) {
                this.CheckFileHashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFileHashOperationCompleted);
            }
            this.InvokeAsync("CheckFileHash", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename}, this.CheckFileHashOperationCompleted, userState);
        }
        
        private void OnCheckFileHashOperationCompleted(object arg) {
            if ((this.CheckFileHashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFileHashCompleted(this, new CheckFileHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/DownloadChunk", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadChunk(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, long p_offset, int p_bufferSize) {
            object[] results = this.Invoke("DownloadChunk", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename,
                        p_offset,
                        p_bufferSize});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadChunkAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, long p_offset, int p_bufferSize) {
            this.DownloadChunkAsync(p_cocd, p_certkey, p_ipadrs, p_wdate, p_filename, p_offset, p_bufferSize, null);
        }
        
        /// <remarks/>
        public void DownloadChunkAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.DateTime p_wdate, string p_filename, long p_offset, int p_bufferSize, object userState) {
            if ((this.DownloadChunkOperationCompleted == null)) {
                this.DownloadChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadChunkOperationCompleted);
            }
            this.InvokeAsync("DownloadChunk", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_wdate,
                        p_filename,
                        p_offset,
                        p_bufferSize}, this.DownloadChunkOperationCompleted, userState);
        }
        
        private void OnDownloadChunkOperationCompleted(object arg) {
            if ((this.DownloadChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadChunkCompleted(this, new DownloadChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/GetGenInforItemList", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetGenInforItemList(string p_cocd, System.Guid p_certkey, string p_ipadrs, string[] p_items) {
            object[] results = this.Invoke("GetGenInforItemList", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_items});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetGenInforItemListAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string[] p_items) {
            this.GetGenInforItemListAsync(p_cocd, p_certkey, p_ipadrs, p_items, null);
        }
        
        /// <remarks/>
        public void GetGenInforItemListAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string[] p_items, object userState) {
            if ((this.GetGenInforItemListOperationCompleted == null)) {
                this.GetGenInforItemListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGenInforItemListOperationCompleted);
            }
            this.InvokeAsync("GetGenInforItemList", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_items}, this.GetGenInforItemListOperationCompleted, userState);
        }
        
        private void OnGetGenInforItemListOperationCompleted(object arg) {
            if ((this.GetGenInforItemListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGenInforItemListCompleted(this, new GetGenInforItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/ConstantSelect", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConstantSelect(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_appkey, string p_default) {
            object[] results = this.Invoke("ConstantSelect", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_appkey,
                        p_default});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConstantSelectAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_appkey, string p_default) {
            this.ConstantSelectAsync(p_cocd, p_certkey, p_ipadrs, p_appkey, p_default, null);
        }
        
        /// <remarks/>
        public void ConstantSelectAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_appkey, string p_default, object userState) {
            if ((this.ConstantSelectOperationCompleted == null)) {
                this.ConstantSelectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConstantSelectOperationCompleted);
            }
            this.InvokeAsync("ConstantSelect", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_appkey,
                        p_default}, this.ConstantSelectOperationCompleted, userState);
        }
        
        private void OnConstantSelectOperationCompleted(object arg) {
            if ((this.ConstantSelectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConstantSelectCompleted(this, new ConstantSelectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/TranslateDataSet", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet TranslateDataSet(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.Data.DataSet p_dataset, int p_tableindex, string p_culture, string[] p_columns) {
            object[] results = this.Invoke("TranslateDataSet", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_dataset,
                        p_tableindex,
                        p_culture,
                        p_columns});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TranslateDataSetAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.Data.DataSet p_dataset, int p_tableindex, string p_culture, string[] p_columns) {
            this.TranslateDataSetAsync(p_cocd, p_certkey, p_ipadrs, p_dataset, p_tableindex, p_culture, p_columns, null);
        }
        
        /// <remarks/>
        public void TranslateDataSetAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, System.Data.DataSet p_dataset, int p_tableindex, string p_culture, string[] p_columns, object userState) {
            if ((this.TranslateDataSetOperationCompleted == null)) {
                this.TranslateDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTranslateDataSetOperationCompleted);
            }
            this.InvokeAsync("TranslateDataSet", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_dataset,
                        p_tableindex,
                        p_culture,
                        p_columns}, this.TranslateDataSetOperationCompleted, userState);
        }
        
        private void OnTranslateDataSetOperationCompleted(object arg) {
            if ((this.TranslateDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TranslateDataSetCompleted(this, new TranslateDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.com/WebHard.WProxy/TranslateText", RequestNamespace="http://www.com/WebHard.WProxy/", ResponseNamespace="http://www.com/WebHard.WProxy/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TranslateText(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_culture, string p_text) {
            object[] results = this.Invoke("TranslateText", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_culture,
                        p_text});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TranslateTextAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_culture, string p_text) {
            this.TranslateTextAsync(p_cocd, p_certkey, p_ipadrs, p_culture, p_text, null);
        }
        
        /// <remarks/>
        public void TranslateTextAsync(string p_cocd, System.Guid p_certkey, string p_ipadrs, string p_culture, string p_text, object userState) {
            if ((this.TranslateTextOperationCompleted == null)) {
                this.TranslateTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTranslateTextOperationCompleted);
            }
            this.InvokeAsync("TranslateText", new object[] {
                        p_cocd,
                        p_certkey,
                        p_ipadrs,
                        p_culture,
                        p_text}, this.TranslateTextOperationCompleted, userState);
        }
        
        private void OnTranslateTextOperationCompleted(object arg) {
            if ((this.TranslateTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TranslateTextCompleted(this, new TranslateTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckFolderCompletedEventHandler(object sender, CheckFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateFolderCompletedEventHandler(object sender, CreateFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CreateRootFolderCompletedEventHandler(object sender, CreateRootFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateRootFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateRootFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteFileCompletedEventHandler(object sender, DeleteFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeleteFolderCompletedEventHandler(object sender, DeleteFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void FileSearchCompletedEventHandler(object sender, FileSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FileSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FileSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAuthFileListCompletedEventHandler(object sender, GetAuthFileListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthFileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthFileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAuthListCompletedEventHandler(object sender, GetAuthListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetFileInfoCompletedEventHandler(object sender, GetFileInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetFolderInfoCompletedEventHandler(object sender, GetFolderInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetFolderListCompletedEventHandler(object sender, GetFolderListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetOrgCenterListCompletedEventHandler(object sender, GetOrgCenterListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrgCenterListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrgCenterListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPersonInfoCompletedEventHandler(object sender, GetPersonInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPersonInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPersonInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void IsExistsFolderInFileCompletedEventHandler(object sender, IsExistsFolderInFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsExistsFolderInFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsExistsFolderInFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void IsExistsRootFolderCompletedEventHandler(object sender, IsExistsRootFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsExistsRootFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsExistsRootFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void IsExistsSubFolderCompletedEventHandler(object sender, IsExistsSubFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsExistsSubFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsExistsSubFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void IsPowerUserCompletedEventHandler(object sender, IsPowerUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPowerUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPowerUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void MoveFileCompletedEventHandler(object sender, MoveFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void MoveFolderCompletedEventHandler(object sender, MoveFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateAuthListCompletedEventHandler(object sender, UpdateAuthListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateAuthListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateAuthListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateFileInfoCompletedEventHandler(object sender, UpdateFileInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UpdateFolderNameCompletedEventHandler(object sender, UpdateFolderNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFolderNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFolderNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckDownloadFileHashCompletedEventHandler(object sender, CheckDownloadFileHashCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDownloadFileHashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDownloadFileHashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CloseDownloadFileCompletedEventHandler(object sender, CloseDownloadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseDownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloseDownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DownloadFileCompletedEventHandler(object sender, DownloadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetFileSizeCompletedEventHandler(object sender, GetFileSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void PrepareDownloadFileCompletedEventHandler(object sender, PrepareDownloadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareDownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareDownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long p_filesize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int p_maxlength {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckUploadFileHashCompletedEventHandler(object sender, CheckUploadFileHashCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUploadFileHashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUploadFileHashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void FailureCloseUploadFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void PrepareUploadFileCompletedEventHandler(object sender, PrepareUploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareUploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareUploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string p_fileid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime p_wdate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string p_filename {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int p_maxlength {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SuccessCloseUploadFileCompletedEventHandler(object sender, SuccessCloseUploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuccessCloseUploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuccessCloseUploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AppendChunkCompletedEventHandler(object sender, AppendChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppendChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppendChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckFileHashCompletedEventHandler(object sender, CheckFileHashCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFileHashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFileHashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DownloadChunkCompletedEventHandler(object sender, DownloadChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetGenInforItemListCompletedEventHandler(object sender, GetGenInforItemListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGenInforItemListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGenInforItemListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ConstantSelectCompletedEventHandler(object sender, ConstantSelectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConstantSelectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConstantSelectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void TranslateDataSetCompletedEventHandler(object sender, TranslateDataSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TranslateDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TranslateDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void TranslateTextCompletedEventHandler(object sender, TranslateTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TranslateTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TranslateTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591